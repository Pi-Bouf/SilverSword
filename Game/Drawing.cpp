#include "Drawing.h"


Drawing::Drawing(string name, Input *e)
{
	drawingName = name;
	event = e;
	vboID = 0;
	vaoID = 0;
	m_shader = new Shader("Shaders/skybox.vert", "Shaders/skybox.frag");
	m_shader->load();

	texture.setImagePath("Textures/Herbe.jpg");
	texture.loadTexture();
	
	float vertices[] = { 0.000000, 15.030001, -23.148224, 4.515995, -15.030001, -22.703436, 0.000000, -15.030001, -23.148224,
		4.515995, 15.030001, -22.703436, 8.858442, -15.030001, -21.386169, 4.515995, -15.030001, -22.703436,
		8.858442, 15.030001, -21.386169, 12.860464, -15.030001, -19.247044, 8.858442, -15.030001, -21.386169,
		12.860464, 15.030001, -19.247044, 16.368265, -15.030001, -16.368265, 12.860464, -15.030001, -19.247044,
		16.368265, 15.030001, -16.368265, 19.247046, -15.030001, -12.860463, 16.368265, -15.030001, -16.368265,
		19.247046, 15.030001, -12.860463, 21.386169, -15.030001, -8.858441, 19.247046, -15.030001, -12.860463,
		21.386169, 15.030001, -8.858441, 22.703436, -15.030001, -4.515995, 21.386169, -15.030001, -8.858441,
		22.703436, 15.030001, -4.515995, 23.148224, -15.030001, -0.000002, 22.703436, -15.030001, -4.515995,
		23.148224, 15.030001, -0.000002, 22.703438, -15.030001, 4.515992, 23.148224, -15.030001, -0.000002,
		22.703438, 15.030001, 4.515992, 21.386171, -15.030001, 8.858438, 22.703438, -15.030001, 4.515992,
		21.386171, 15.030001, 8.858438, 19.247046, -15.030001, 12.860463, 21.386171, -15.030001, 8.858438,
		19.247046, 15.030001, 12.860463, 16.368265, -15.030001, 16.368265, 19.247046, -15.030001, 12.860463,
		16.368265, 15.030001, 16.368265, 12.860463, -15.030001, 19.247046, 16.368265, -15.030001, 16.368265,
		12.860463, 15.030001, 19.247046, 8.858438, -15.030001, 21.386173, 12.860463, -15.030001, 19.247046,
		8.858438, 15.030001, 21.386173, 4.515989, -15.030001, 22.703438, 8.858438, -15.030001, 21.386173,
		4.515989, 15.030001, 22.703438, -0.000008, -15.030001, 23.148224, 4.515989, -15.030001, 22.703438,
		-0.000008, 15.030001, 23.148224, -4.516004, -15.030001, 22.703436, -0.000008, -15.030001, 23.148224,
		-4.516004, 15.030001, 22.703436, -8.858452, -15.030001, 21.386166, -4.516004, -15.030001, 22.703436,
		-8.858452, 15.030001, 21.386166, -12.860476, -15.030001, 19.247038, -8.858452, -15.030001, 21.386166,
		-12.860476, 15.030001, 19.247038, -16.368277, -15.030001, 16.368256, -12.860476, -15.030001, 19.247038,
		-16.368277, 15.030001, 16.368256, -19.247053, -15.030001, 12.860451, -16.368277, -15.030001, 16.368256,
		-19.247053, 15.030001, 12.860451, -21.386177, -15.030001, 8.858424, -19.247053, -15.030001, 12.860451,
		-21.386177, 15.030001, 8.858424, -22.703442, -15.030001, 4.515975, -21.386177, -15.030001, 8.858424,
		-22.703442, 15.030001, 4.515975, -23.148224, -15.030001, -0.000022, -22.703442, -15.030001, 4.515975,
		-23.148224, 15.030001, -0.000022, -22.703432, -15.030001, -4.516018, -23.148224, -15.030001, -0.000022,
		-22.703432, 15.030001, -4.516018, -21.386160, -15.030001, -8.858466, -22.703432, -15.030001, -4.516018,
		-21.386160, 15.030001, -8.858466, -19.247028, -15.030001, -12.860488, -21.386160, -15.030001, -8.858466,
		-19.247028, 15.030001, -12.860488, -16.368244, -15.030001, -16.368286, -19.247028, -15.030001, -12.860488,
		-16.368244, 15.030001, -16.368286, -12.860438, -15.030001, -19.247063, -16.368244, -15.030001, -16.368286,
		-12.860438, 15.030001, -19.247063, -8.858411, -15.030001, -21.386183, -12.860438, -15.030001, -19.247063,
		-8.858411, 15.030001, -21.386183, -4.515960, -15.030001, -22.703444, -8.858411, -15.030001, -21.386183,
		-4.515960, 15.030001, -22.703444, 0.000000, -15.030001, -23.148224, -4.515960, -15.030001, -22.703444,
		0.000000, 15.030001, -23.148224, 4.515995, 15.030001, -22.703436, 4.515995, -15.030001, -22.703436,
		4.515995, 15.030001, -22.703436, 8.858442, 15.030001, -21.386169, 8.858442, -15.030001, -21.386169,
		8.858442, 15.030001, -21.386169, 12.860464, 15.030001, -19.247044, 12.860464, -15.030001, -19.247044,
		12.860464, 15.030001, -19.247044, 16.368265, 15.030001, -16.368265, 16.368265, -15.030001, -16.368265,
		16.368265, 15.030001, -16.368265, 19.247046, 15.030001, -12.860463, 19.247046, -15.030001, -12.860463,
		19.247046, 15.030001, -12.860463, 21.386169, 15.030001, -8.858441, 21.386169, -15.030001, -8.858441,
		21.386169, 15.030001, -8.858441, 22.703436, 15.030001, -4.515995, 22.703436, -15.030001, -4.515995,
		22.703436, 15.030001, -4.515995, 23.148224, 15.030001, -0.000002, 23.148224, -15.030001, -0.000002,
		23.148224, 15.030001, -0.000002, 22.703438, 15.030001, 4.515992, 22.703438, -15.030001, 4.515992,
		22.703438, 15.030001, 4.515992, 21.386171, 15.030001, 8.858438, 21.386171, -15.030001, 8.858438,
		21.386171, 15.030001, 8.858438, 19.247046, 15.030001, 12.860463, 19.247046, -15.030001, 12.860463,
		19.247046, 15.030001, 12.860463, 16.368265, 15.030001, 16.368265, 16.368265, -15.030001, 16.368265,
		16.368265, 15.030001, 16.368265, 12.860463, 15.030001, 19.247046, 12.860463, -15.030001, 19.247046,
		12.860463, 15.030001, 19.247046, 8.858438, 15.030001, 21.386173, 8.858438, -15.030001, 21.386173,
		8.858438, 15.030001, 21.386173, 4.515989, 15.030001, 22.703438, 4.515989, -15.030001, 22.703438,
		4.515989, 15.030001, 22.703438, -0.000008, 15.030001, 23.148224, -0.000008, -15.030001, 23.148224,
		-0.000008, 15.030001, 23.148224, -4.516004, 15.030001, 22.703436, -4.516004, -15.030001, 22.703436,
		-4.516004, 15.030001, 22.703436, -8.858452, 15.030001, 21.386166, -8.858452, -15.030001, 21.386166,
		-8.858452, 15.030001, 21.386166, -12.860476, 15.030001, 19.247038, -12.860476, -15.030001, 19.247038,
		-12.860476, 15.030001, 19.247038, -16.368277, 15.030001, 16.368256, -16.368277, -15.030001, 16.368256,
		-16.368277, 15.030001, 16.368256, -19.247053, 15.030001, 12.860451, -19.247053, -15.030001, 12.860451,
		-19.247053, 15.030001, 12.860451, -21.386177, 15.030001, 8.858424, -21.386177, -15.030001, 8.858424,
		-21.386177, 15.030001, 8.858424, -22.703442, 15.030001, 4.515975, -22.703442, -15.030001, 4.515975,
		-22.703442, 15.030001, 4.515975, -23.148224, 15.030001, -0.000022, -23.148224, -15.030001, -0.000022,
		-23.148224, 15.030001, -0.000022, -22.703432, 15.030001, -4.516018, -22.703432, -15.030001, -4.516018,
		-22.703432, 15.030001, -4.516018, -21.386160, 15.030001, -8.858466, -21.386160, -15.030001, -8.858466,
		-21.386160, 15.030001, -8.858466, -19.247028, 15.030001, -12.860488, -19.247028, -15.030001, -12.860488,
		-19.247028, 15.030001, -12.860488, -16.368244, 15.030001, -16.368286, -16.368244, -15.030001, -16.368286,
		-16.368244, 15.030001, -16.368286, -12.860438, 15.030001, -19.247063, -12.860438, -15.030001, -19.247063,
		-12.860438, 15.030001, -19.247063, -8.858411, 15.030001, -21.386183, -8.858411, -15.030001, -21.386183,
		-8.858411, 15.030001, -21.386183, -4.515960, 15.030001, -22.703444, -4.515960, -15.030001, -22.703444,
		-4.515960, 15.030001, -22.703444, 0.000000, 15.030001, -23.148224, 0.000000, -15.030001, -23.148224 };      // Face 6

	float couleurs[] = { 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,           // Face 1
		1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,           // Face 1

		0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,           // Face 2
		0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,           // Face 2

		0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,           // Face 3
		0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,           // Face 3

		1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,           // Face 4
		1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,           // Face 4

		0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,           // Face 5
		0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,           // Face 5

		0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,           // Face 6
		0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };          // Face 6

	float texturesTMP[] = {
		0, 0, 4, 0, 4, 4,
		0, 0, 0, 4, 4, 4,
		0, 0, 4, 0, 4, 4,
		0, 0, 0, 4, 4, 4,
		0, 0, 4, 0, 4, 4,
		0, 0, 0, 4, 4, 4,
		0, 0, 4, 0, 4, 4,
		0, 0, 0, 4, 4, 4,
		0, 0, 4, 0, 4, 4,
		0, 0, 0, 4, 4, 4,
		0, 0, 4, 0, 4, 4,
		0, 0, 0, 4, 4, 4 };


	nbrVertices = sizeof(vertices) / sizeof(float);
	nbrCouleurs = sizeof(couleurs) / sizeof(float);
	nbrTextures = sizeof(texturesTMP) / sizeof(float);
	m_vertices = new float[nbrVertices];
	m_couleurs = new float[nbrCouleurs];
	m_textures = new float[nbrTextures];
	
	for (int i = 0; i < nbrVertices; i++)
	{
		m_vertices[i] = vertices[i];
	}
	for (int k = 0; k < nbrCouleurs; k++)
	{
		m_couleurs[k] = couleurs[k];
	}
	for (int j = 0; j < nbrTextures; j++)
	{
		m_textures[j] = texturesTMP[j];
	}
}

void Drawing::afficher(mat4 modelview, mat4 projection)
{
	glUseProgram(m_shader->getProgramID());

	glBindVertexArray(vaoID);

		glUniformMatrix4fv(glGetUniformLocation(m_shader->getProgramID(), "modelview"), 1, GL_FALSE, value_ptr(modelview));
		glUniformMatrix4fv(glGetUniformLocation(m_shader->getProgramID(), "projection"), 1, GL_FALSE, value_ptr(projection));
		glUniform1f(glGetUniformLocation(m_shader->getProgramID(), "time"), SDL_GetTicks()*0.0005);

		//glBindTexture(GL_TEXTURE_2D, texture.getTextureID());
			glDrawArrays(GL_TRIANGLES, 0, nbrVertices / 3);
		//glBindTexture(GL_TEXTURE_2D, 0);

	glBindVertexArray(0);

	glUseProgram(0);
}

void Drawing::updateVBO(void *donnee, int size, int offset)
{
	glBindBuffer(GL_ARRAY_BUFFER, vboID);

	void *adresseVBO = glMapBuffer(GL_ARRAY_BUFFER, GL_WRITE_ONLY);

	if (adresseVBO == NULL)
	{
		cout << "Erreur au niveau de la récupération du VBO" << endl;
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		return;
	}

	memcpy((char*)adresseVBO + offset, donnee, nbrVertices*sizeof(float));

	glUnmapBuffer(GL_ARRAY_BUFFER);
	adresseVBO = 0;

	glBindBuffer(GL_ARRAY_BUFFER, 0);
}

void Drawing::loadV()
{
	// Si l'identifiant existe déjà, on supprime, évitant les fuites de mémoires
	if (glIsBuffer(vboID) == GL_TRUE)
		glDeleteBuffers(1, &vboID);

	// Génération identifiant
	glGenBuffers(1, &vboID);
	// Vérouillage
	glBindBuffer(GL_ARRAY_BUFFER, vboID);

	// On demande de la mémoire sur la carte graphique
	glBufferData(GL_ARRAY_BUFFER, nbrVertices*sizeof(float) + nbrCouleurs*sizeof(float), 0, GL_STATIC_DRAW);

	// On transmet directement les valeurs sur la carte graphique
	glBufferSubData(GL_ARRAY_BUFFER, 0, nbrVertices*sizeof(float), m_vertices);
	glBufferSubData(GL_ARRAY_BUFFER, nbrVertices*sizeof(float), nbrCouleurs*sizeof(float), m_couleurs);

	// On retire le vérouillage
	glBindBuffer(GL_ARRAY_BUFFER, 0);


	// Si l'identifiant existe déjà, on le supprime
	if (glIsVertexArray(vaoID) == GL_TRUE)
		glDeleteVertexArrays(1, &vaoID);
	// Génération de l'identifiant
	glGenVertexArrays(1, &vaoID);
	glBindVertexArray(vaoID);

	glBindBuffer(GL_ARRAY_BUFFER, vboID);
		// Enregistrement dans la CG des procédures
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
		glEnableVertexAttribArray(0);
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(nbrVertices*sizeof(float)));
		glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	// Déverouillage
	glBindVertexArray(0);

}

Drawing::~Drawing()
{
	glDeleteBuffers(1, &vboID);
	glDeleteVertexArrays(1, &vaoID);
}